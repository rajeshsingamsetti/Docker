Hello docker
refdocument:
rajesh docker tuts on failure:
https://www.youtube.com/watch?v=OC8KX54kJIM&list=PLBiBedx7DOQDqQT3Hyu0s-9kR0s44SEee&index=6
https://www.youtube.com/watch?v=Ps1se3GSk6o&list=PLBiBedx7DOQDqQT3Hyu0s-9kR0s44SEee&index=7

3333 raj
url: https://docs.google.com/presentation/d/1aM2lfblBEaMm4m0033sPQJMlZvWNH51VLEgE3tMOAXw/edit#slide=id.g1f87997393_0_782
Docker is an containization tool
we can run any virtual machines in small containers
container orchestartion tools are managed the containers

what is container
containers is nothing but a process . in that process we can run containers
conatainers contain
namespaces: it creted its own namespaces
controlgroups: it will manage the how mush space occupied to containers

docker mixed all those things it will give u and guide u

Installation:
Docker Types: (find os cat /etc/*release )
Community Edition (CE)
Enterprise Edition(EE) here we will get an licenced key to use

We are using community edition. Before we had docker.io but as of now free use we r using docker ce

Installations:Rhel:8
Reference link:
Go to console(putty or aws)
sudo su
cd 
yum install yum-utils device-mapper-persistent-data lvm2
      yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
      sudo yum install docker-ce docker-ce-cli containerd.io --nobest

continue(Docker Compose)

Accept the permission with y

Wait for status will be 
Skipped:
  docker-ce-3:19.03.11-3.el7.x86_64                                                                                                                                                                       
Complete!
systemctl start docker
systemctl enable docker
docker --version
Test Docker:
docker run hello-world
     If u see hello from docker!  
      Means its sucess
Install Docker Compose
Foolllow below url to install docker compose

sudo docker-compose --version

 
========
Refurl: https://docs.docker.com/engine/install/ubuntu/

Docker Install On Ubuntu
sudo apt-get update
sudo apt-get remove docker docker-engine docker.io containerd runc
sudo apt-get update
sudo apt-get install     apt-transport-https     ca-certificates     curl     gnupg-agent     software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo apt-key fingerprint 0EBFCD88
sudo add-apt-repository    "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
$(lsb_release -cs) \
stable"
sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io
apt-cache madison docker-ce
sudo apt-get install docker-ce=<VERSION_STRING> docker-ce-cli=5:18.09.6~3-0~ubuntu-bionic containerd.io
sudo apt-get install docker-ce=5:18.09.6~3-0~ubuntu-bionic docker-ce-cli=5:18.09.6~3-0~ubuntu-bionic containerd.io
Docker Compose:
sudo curl -L "https://github.com/docker/compose/releases/download/1.26.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

Simple way of install docker
*** curl https://get.docker.com/ | bash
docker-compose --version

==================

what is container brief explanation:

https://jvns.ca/blog/2016/10/10/what-even-is-a-container/#:~:text=When%20you%20use%20those%20features,Let's%20dive%20in!

docker is used for stateless applications

docker run --rm --dit --name mycontainer imagename


docker run --rm --dit --name webapp1 --publish 8000:80 sreeharshav/testcontainer:v1


                                                      Docker Networking
hostname resolutions important in  container system

docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
6d43475b1e61        bridge              bridge              local
7a9da268b4ef        host                host                local
3725bf7f6bf9        none                null                local

Here the scope means it will access only inside the server not in outside

Host is name of network
I want run a container and that container i don’t want get a direct access from outside without portforwarding
Above scenario bridge network will useful 

Host network
Whatever network present in host machine  that will be asign to container. we will get a direct access of a network from outside . 

None:
I want create a container without any network that time we can use none


docker network ls(to show networks)
docker network inspect (inspect network)
We can see how many bridges connected to that network.
docker network create --driver
docker network connect
docker network disconnect

Bridge network is predefined network which we can’t delete

To create bridge network the cidr network length is 10.10.0.0/24  ---- gateway → 10.10.0.1 nameofsubnet
docker network create --subnet 10.10.0.0/24 --gateway 10.10.0.1 rajnetwork
After suuccessfully executed u get this below code
6f179747fa9aefb513c4ecac327a6a420abe847fea9b38a1a1b942fc584a70cf
To check network
docker network ls (here u will see all your networks)

docker network inspect nameofnetwork
Here u will see created subnet with range in json format with default network is bridge

Now run a container with your own created network

docker run -ti  --name raj --hostname sing --net rajnetwork --ip 10.10.0.10 ubuntu

Connect:
docker network connect 758d720e4cc2(networkid) 7f6fad993a93(existing conatiner id)
Ip a (now count network list)
docker network disconnect 758d720e4cc2(networkid) 7f6fad993a93(existing conatiner id)
ip a  (now one network will be disconnected from container)
docker network prune (this will  remove all networks not used by conatiner)
docker --help


                                                create a new network
docker network create  my_app_net
Now we are running a container using a particular network

docker container run -d --name new_nginx --network my_app_net nginx(image name)
docker network inspect my_app_net
In last json data we can new_nginx server.

Connect
docker network connect 758d720e4cc2(networkid) 7f6fad993a93(existing conatiner id)

To check network added or not using

docker container  inspect 7f6fad993a93  (docker existing wehost containerid)

Now we can see myappnet network is add
Disconnect:
docker network disconnect 758d720e4cc2(networkid) 7f6fad993a93(existing conatiner id)
docker container  inspect 7f6fad993a93  (docker existing wehost containerid)
Now we have only one network only.

to get container id's
docker ps -aq

to get a ipaddress of container
docker inspect containerid | grep -i "IPAddress"
to get all ips
for c in $(docker ps -aq)
do
docker inspect $c | grep -i "IPAddress"
done

Note: we can't trust ip's in docker we need to trust the dns resolution

docker run --help
docker run --rm -dit --name outsidename --hostname insidename --network host imagename 

docker exec -it  outsidename bash


none and host networks we won't use in real times mostly used in bridge network

to create our own network
docker network create test1
docker network ls

docker inspect test1

docker network create test2 --ip-range 172.25.0.0/16 --gateway 172.25.0.254
docker network create test3 (it will take auto iprange)

docker network inspect test3

docker network prune (will delete the network which we are not used)

docker inspect testsample

to create container in above network

for c in {1..5}
do
docker run --rm -dit --name CON$C --network testsample imagename
sleep 1
don2

docker ps -aq

docker exec -it CON1 bash

ping CON2
ping CON3


*note in default network we don;t have dns resolution but it will ping ipaddress
** user defined networks only dns resolution will work

docker network connect CON2 DEFAULT1


============================================================================
install mysql server on docker container

docker run --name=mysqlCon --network CON2 -d mysql/mysql-server:5.7

to get mysql docker password
docker ps
docker logs mysqlCon

we will get password in this locks

docker exec -it mysqlCon bash

mysql -u root -p
paste the password here

create database and dump tables play with it
CREATE DATABASE  IF NOT EXISTS `myflixdb` /*!40100 DEFAULT CHARACTER SET latin1 */;
USE `myflixdb`;
-- MySQL dump 10.13  Distrib 5.5.16, for Win32 (x86)
--
-- Host: localhost    Database: myflixdb
-- ------------------------------------------------------
-- Server version	5.5.25a

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `movies`
--

DROP TABLE IF EXISTS `movies`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `movies` (
  `movie_id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(300) DEFAULT NULL,
  `director` varchar(150) DEFAULT NULL,
  `year_released` year(4) DEFAULT NULL,
  `category_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`movie_id`),
  KEY `fk_Movies_Categories1` (`category_id`),
  KEY `title_index` (`title`),
  KEY `qw` (`title`),
  CONSTRAINT `fk_Movies_Categories1` FOREIGN KEY (`category_id`) REFERENCES `categories` (`category_id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `movies`
--

LOCK TABLES `movies` WRITE;
/*!40000 ALTER TABLE `movies` DISABLE KEYS */;
INSERT INTO `movies` VALUES (1,'Pirates of the Caribean 4',' Rob Marshall',2011,1),(2,'Forgetting Sarah Marshal','Nicholas Stoller',2008,2),(3,'X-Men',NULL,2008,NULL),(4,'Code Name Black','Edgar Jimz',2010,NULL),(5,'Daddy\'s Little Girls',NULL,2007,8),(6,'Angels and Demons',NULL,2007,6),(7,'Davinci Code',NULL,2007,6),(9,'Honey mooners','John Schultz',2005,8),(16,'67% Guilty',NULL,2012,NULL);
/*!40000 ALTER TABLE `movies` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `payments`
--

DROP TABLE IF EXISTS `payments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `payments` (
  `payment_id` int(11) NOT NULL AUTO_INCREMENT,
  `membership_number` int(11) DEFAULT NULL,
  `payment_date` date DEFAULT NULL,
  `description` varchar(75) DEFAULT NULL,
  `amount_paid` float DEFAULT NULL,
  `external_reference_number` int(11) DEFAULT NULL,
  PRIMARY KEY (`payment_id`),
  KEY `fk_Payments_Members1` (`membership_number`),
  CONSTRAINT `fk_Payments_Members1` FOREIGN KEY (`membership_number`) REFERENCES `members` (`membership_number`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `payments`
--

LOCK TABLES `payments` WRITE;
/*!40000 ALTER TABLE `payments` DISABLE KEYS */;
INSERT INTO `payments` VALUES (1,1,'2012-07-23','Movie rental payment',2500,11),(2,1,'2012-07-25','Movie rental payment',2000,12),(3,3,'2012-07-30','Movie rental payment',6000,NULL);
/*!40000 ALTER TABLE `payments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `members`
--

DROP TABLE IF EXISTS `members`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `members` (
  `membership_number` int(11) NOT NULL AUTO_INCREMENT,
  `full_names` varchar(350) NOT NULL,
  `gender` varchar(6) DEFAULT NULL,
  `date_of_birth` date DEFAULT NULL,
  `physical_address` varchar(255) DEFAULT NULL,
  `postal_address` varchar(255) DEFAULT NULL,
  `contact_number` varchar(75) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`membership_number`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `members`
--

LOCK TABLES `members` WRITE;
/*!40000 ALTER TABLE `members` DISABLE KEYS */;
INSERT INTO `members` VALUES (1,'Janet Jones','Female','1980-07-21','First Street Plot No 4','Private Bag','0759 253 542','janetjones@yagoo.cm'),(2,'Janet Smith Jones','Female','1980-06-23','Melrose 123',NULL,NULL,'jj@fstreet.com'),(3,'Robert Phil','Male','1989-07-12','3rd Street 34',NULL,'12345','rm@tstreet.com'),(4,'Gloria Williams','Female','1984-02-14','2nd Street 23',NULL,NULL,NULL);
/*!40000 ALTER TABLE `members` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Temporary table structure for view `accounts_v_members`
--

DROP TABLE IF EXISTS `accounts_v_members`;
/*!50001 DROP VIEW IF EXISTS `accounts_v_members`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `accounts_v_members` (
  `membership_number` int(11),
  `full_names` varchar(350),
  `gender` varchar(6)
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Temporary table structure for view `general_v_movie_rentals`
--

DROP TABLE IF EXISTS `general_v_movie_rentals`;
/*!50001 DROP VIEW IF EXISTS `general_v_movie_rentals`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `general_v_movie_rentals` (
  `membership_number` int(11),
  `full_names` varchar(350),
  `title` varchar(300),
  `transaction_date` date,
  `return_date` date
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `categories`
--

DROP TABLE IF EXISTS `categories`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `categories` (
  `category_id` int(11) NOT NULL AUTO_INCREMENT,
  `category_name` varchar(150) DEFAULT NULL,
  `remarks` varchar(500) DEFAULT NULL,
  PRIMARY KEY (`category_id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `categories`
--

LOCK TABLES `categories` WRITE;
/*!40000 ALTER TABLE `categories` DISABLE KEYS */;
INSERT INTO `categories` VALUES (1,'Comedy','Movies with humour'),(2,'Romantic','Love stories'),(3,'Epic','Story acient movies'),(4,'Horror',NULL),(5,'Science Fiction',NULL),(6,'Thriller',NULL),(7,'Action',NULL),(8,'Romantic Comedy',NULL);
/*!40000 ALTER TABLE `categories` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `movierentals`
--

DROP TABLE IF EXISTS `movierentals`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `movierentals` (
  `reference_number` int(11) NOT NULL AUTO_INCREMENT,
  `transaction_date` date DEFAULT NULL,
  `return_date` date DEFAULT NULL,
  `membership_number` int(11) DEFAULT NULL,
  `movie_id` int(11) DEFAULT NULL,
  `movie_returned` bit(1) DEFAULT b'0',
  PRIMARY KEY (`reference_number`),
  KEY `fk_MovieRentals_Members1` (`membership_number`),
  KEY `fk_MovieRentals_Movies1` (`movie_id`),
  CONSTRAINT `fk_MovieRentals_Members1` FOREIGN KEY (`membership_number`) REFERENCES `members` (`membership_number`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_MovieRentals_Movies1` FOREIGN KEY (`movie_id`) REFERENCES `movies` (`movie_id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `movierentals`
--

LOCK TABLES `movierentals` WRITE;
/*!40000 ALTER TABLE `movierentals` DISABLE KEYS */;
INSERT INTO `movierentals` VALUES (11,'2012-06-20',NULL,1,1,'\0'),(12,'2012-06-22','2012-06-25',1,2,'\0'),(13,'2012-06-22','2012-06-25',3,2,'\0'),(14,'2012-06-21','2012-06-24',2,2,'\0'),(15,'2012-06-23',NULL,3,3,'\0');
/*!40000 ALTER TABLE `movierentals` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Final view structure for view `accounts_v_members`
--

/*!50001 DROP TABLE IF EXISTS `accounts_v_members`*/;
/*!50001 DROP VIEW IF EXISTS `accounts_v_members`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `accounts_v_members` AS select `members`.`membership_number` AS `membership_number`,`members`.`full_names` AS `full_names`,`members`.`gender` AS `gender` from `members` */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `general_v_movie_rentals`
--

/*!50001 DROP TABLE IF EXISTS `general_v_movie_rentals`*/;
/*!50001 DROP VIEW IF EXISTS `general_v_movie_rentals`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `general_v_movie_rentals` AS select `mb`.`membership_number` AS `membership_number`,`mb`.`full_names` AS `full_names`,`mo`.`title` AS `title`,`mr`.`transaction_date` AS `transaction_date`,`mr`.`return_date` AS `return_date` from ((`movierentals` `mr` join `members` `mb` on((`mr`.`membership_number` = `mb`.`membership_number`))) join `movies` `mo` on((`mr`.`movie_id` = `mo`.`movie_id`))) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2012-08-07 18:37:36

INSERT INTO `movies` VALUES (100,'Pirates of the Caribean 40',' Rob Marshall',2022,1);
INSERT INTO `movies` VALUES (101,'Pirates of the Caribean 41',' Rob Marshall',2022,1);
INSERT INTO `movies` VALUES (103,'Pirates of the Caribean 42',' Rob Marshall',2022,1);
INSERT INTO `movies` VALUES (104,'Pirates of the Caribean 43',' Rob Marshall',2022,1);
INSERT INTO `movies` VALUES (105,'Pirates of the Caribean 44',' Rob Marshall',2022,1);

INSERT INTO `movies` VALUES (107,'Fast & Furious 30',' Rob Marshall',2018,7);
INSERT INTO `movies` VALUES (108,'Fast & Furious 31',' Rob Marshall',2019,7);
INSERT INTO `movies` VALUES (109,'Fast & Furious 32',' Rob Marshall',2020,7);
INSERT INTO `movies` VALUES (110,'Fast & Furious 33',' Rob Marshall',2021,7);
INSERT INTO `movies` VALUES (111,'Fast & Furious 34',' Rob Marshall',2022,7);
INSERT INTO `movies` VALUES (112,'Fast & Furious 34',' Rob Marshall',2023,7);
INSERT INTO `movies` VALUES (113,'Fast & Furious 36',' Rob Marshall',2024,7);


ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass';
CREATE USER 'root'@'%' IDENTIFIED BY 'root_password';
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;
FLUSH PRIVILEGES;
show databases;

exit

docker run --rm -dit  --network CON2  --name=fprntend sreeharshav/utils
docker exec -it frontend bash
python --version (need to install python)

apt update && apt install python3 -y

ping mysqlCon
if it will ping means good otherwise need to check

create one file 

pip3 install pyodbc
pip3 install sqlalchemy
pip3 install pymysql
vi app.py (paste the below code)

import pyodbc
import sqlalchemy as sal
import pymysql
from sqlalchemy import create_engine
cnx = create_engine('mysql+pymysql://admin:India123@engawsb05.c7khegicx1do.us-east-1.rds.amazonaws.com/myflixdb')
data = cnx.execute("select * from movies").fetchall()
for item in data:
    print(item)
    
------------ till now paste in app.py file------------------
to run file

python app.py


above way we are connecting from frontend container to backend mysql


========================================================================================================================================================
                                                            Docker Volumes
if container delete also data won't delete
2 ways
bind mount
volumes

majory we used volumes( default path var/lib/docker/volumes)
docker volume ls
ls /var/lib/docker/volumes
docker volume create testvol1
docker volume create testvol2
docker volume create testvol2
ls /var/lib/docker/volumes


docker run --rm -dit -v testvol1:/testfolder sreeharshav/utils

docker exec -it imngname bash

under root folder
mkdir testfolder
cd testfolder
for i in (1..4)
do
echo $(date) > file$i
cat file$1
sleep 1
done


if u create files here it will storing on var/lib/docker/volumes/testvol1/_data

if you delete the container also the files will saved in docker volumes path


same way we are planning to mysql
docker run --rm -dit --name mysql -v testvol2:/var/lib/mysql mysql/mysql-server:latest

docker ps
docker logs mysql (get password)
docker exec -it mysql bash
mysql -u root -p
password (after change the password)
follow the above data schema table strctures)

now if u delete the container also the files will stored in testvol2

now we. are going to build front end

docker run dit --name frontend sreeharshav/utils

docker exec -it frontend bash
apt update && apt install  -y python3-pip python3
pip3 install pyodbc
pip3 install sqlalchemy
pip3 install pymysql

create app.py
import pyodbc
import sqlalchemy as sal
import pymysql
from sqlalchemy import create_engine
cnx = create_engine('mysql+pymysql://root:India123@mysql/myflixdb')
data = cnx.execute("select * from movies").fetchall()
for item in data:
    print(item)
    
paste above code

python3 app.py



=================================================== DockerFile ===================================================

Dockerfile (name must be start with capital letter)
Dockerhub contain images from their we can pull those images

rajeshsingam
111 u know

diff b/w registry and repo
dockerhub and githubs are registry.
inside registry repo's will be there.

for docker file launch one instance.
Dockerfile
FROM
RUN
LABEL
ADD
COPY
CMD
ENTRYPOINT
USER
WORKDIR
EXPOSE
ARG

docker stop $(docker ps -aq)

amazon linux install docker
sudo yum install -y docker
9  sudo service docker start
10  sudo usermod -a -G docker ec2-user


FROM ubuntu:18.04
LABEL owener="raj"
RUN apt update
RUN apt install -y nano wget curl net-tools
RUN mkdir /myapp
WORKDIR /myapp

we can modify the 
FROM ubuntu:18.04
LABEL owener="raj"
RUN apt update; \
    apt install -y nginx nano wget curl net-tools; \
    mkdir /myapp
ADD /var/www/html    
WORKDIR /myapp

docker build -t rajeshsingam/testimg:v1 .

docker run --rm -it -p 8000:80 rajeshsingam/testimg:v1
if u run the image it will directly going into

inside folder of myapp (bcoz of workdir)

git clone https://github.com/mavrick202/dockertest1.git
cd dockertest1
 rm -rf Jenkinsfile RemoveExistingFiles.sh appspec.yml testfile1 

vi Dockerfile
FROM ubuntu:18.04
LABEL owener="raj"
RUN apt update; \
    apt install -y nginx nano wget curl net-tools; \
    mkdir /myapp
COPY index.html /var/www/html/index.nginx-debian.html 
COPY scorekeeper.js /var/www/html/
COPY style.css /var/www/html/
WORKDIR /myapp



docker run --rm -it -p 8000:80 rajeshsingam/testimg:v1

after service nginx start

after go to chrome ur public ip with
publicip:8000/


** add is used for to download data from url not from inside machine we used rarely most probably we use copy
ex:
FROM ubuntu:18.04
LABEL owener="raj"
RUN apt update; \
    apt install -y nginx unzip nano wget curl net-tools; \
    mkdir /myapp
COPY index.html /var/www/html/index.nginx-debian.html 
COPY scorekeeper.js /var/www/html/
COPY style.css /var/www/html/
ADD https://releases.hashicorp.com/terraform/0.14.3/terraform_0.14.3_linux_amd64.zip /usr/local/bin
RUN unzip /usr/local/bin/terraform_0.14.3_linux_amd64.zip 
RUN chmod 700 terraform
RUN mv terraform /usr/local/bin
WORKDIR /myapp
EXPOSE 80
CMD ["nginx","-g", "daemon off;"]

docker stop $(docker ps -aq)

diff b/w cmd & entrypoint

cmd : after building a container what do you want to do in start container will use in cmd
WHEN CONTAINER START CMD WILL AUTO RUN

note when u run without bash (cmd will work if u use it will overwrite cmd)
if u want overcome that we use entrypoint
ENTRYPOINT ["PING"]
CMD ["www.google.com"]

we can overwrite the data of cmd but not ping bcoz its in entrypoint

publish is different expose differener.
publish --> access over internet.
expose --> he container which assign docker file it will assign to that conatiner when docker image is build to understading purpose which ports are expose in container


USER
iam give ec2 + s3 full access
aws configure (install aws cli)
access key
secret key

usermod -aG docker ubuntu
service docker restart
systemctl restart docker

take duplicate session login with ubuntu user access docker
docker ps

but if u want access the aws credentails present inside root

to access root folder data using docker

docker run --rm -dit -v /root/ .aws/:/tmp/aws/ sreeharshav/utils
docker exec -it somename cat /tmp/aws/credentials

now we will get aws access key and secreat key


vi Dockerfile
FROM ubuntu:18.04
LABEL owener="raj"
RUN apt update; \
    apt install -y nginx nano wget curl net-tools; \
    mkdir /myapp
RUN groupadd -r testuser && useradd -r -g testuser testuser
WORKDIR /myapp
USER testuser
#CMD ["nginx","-g", "daemon off;"]
 

docker build -t rajeshsingam/testimg:v1 .
docker run --rm -it -p 8000:80 rajeshsingam/testimg:v1


check dockerfile copy shell script

VOLUME CREATE DOCKERFILE







































